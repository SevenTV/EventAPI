name: EventAPI CI

on:
  push:
    branches:
      - master
      - dev
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - labeled
  workflow_dispatch:
    inputs:
      deploy:
        description: "Which environment to deploy to"
        required: true
        default: "none"
        type: choice
        options:
          - production
          - test
          - none

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DEPLOY: ${{ (inputs.deploy != 'none' && inputs.deploy) || ((github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'production') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'master') && 'production') || ((github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'test') || (github.event_name == 'push' && github.ref_type == 'branch' && github.ref_name == 'dev') || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'staged')) && 'test') || 'none' }}

jobs:
  ci:
    name: EventAPI Lint & Build
    runs-on: aws-runner
    env:
      GOLANGCI_LINT_CACHE: /home/runner/.cache/golangci-lint
    concurrency:
      group: ${{ github.workflow }}-ci-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Yarn
        run: npm install -g yarn

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - id: cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Go Build Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('go.sum') }}

      - name: Go Mod Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('go.sum') }}

      - name: GoLint Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.GOLANGCI_LINT_CACHE }}
          key: ${{ runner.os }}-go-lint-ci

      - name: Node Modules Cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('yarn.lock') }}

      - name: Install Dependencies
        run: make deps

      - name: Install Developer Dependencies
        run: make dev_deps

      - name: Run Linter
        run: make lint

      - name: Build App
        run: make build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ env.DEPLOY != 'none' }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ env.DEPLOY != 'none' }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Make build context
        if: ${{ env.DEPLOY != 'none' }}
        run: |
          docker context create builders

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        if: ${{ env.DEPLOY != 'none' }}
        with:
          install: true
          endpoint: builders

      - name: Build docker image
        uses: docker/build-push-action@v3
        if: inputs.deploy != 'none'
        with:
          context: .
          file: docker/partial.Dockerfile
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ format('seventv-{0}', inputs.deploy) }}/eventapi:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ format('seventv-{0}', inputs.deploy) }}/eventapi:${{ github.sha }}
          push: true

  deploy:
    name: EventAPI Deploy
    needs: ci
    runs-on: aws-runner
    if: ${{ inputs.deploy != 'none' }}
    permissions:
      pull-requests: write
    defaults:
      run:
        working-directory: terraform

    steps:
      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v1
        if: ${{ env.DEPLOY != 'none' }}
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: "Terraform Workspace"
        run: terraform workspace select -or-create=true ${{ env.DEPLOY }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: "Terraform Init"
        id: init
        run: terraform init -upgrade

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: "Terraform Plan"
        id: plan
        run: terraform plan
        continue-on-error: true

      - name: "Update"
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform"
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
